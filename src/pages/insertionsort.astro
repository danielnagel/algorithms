---
import Layout from '../layouts/Layout.astro';
import Canvas from '../components/Canvas.astro';
const customColorTheme = undefined;
const heading = 'Daniel\'s algorithms';
---

<Layout title={heading} customColorTheme={customColorTheme}>
	<div class="algorithm-container">
		<h1>Insertion Sort ↩️</h1>
		<Canvas algorithm='insertionsort' customColorTheme={customColorTheme} />
		<h2>Functionality</h2>
		<p>
			Insertion Sort is a straightforward comparison-based sorting algorithm that builds the final sorted list one element at a time.
			It works by iterating through the list and placing each element into its correct position relative to the already sorted portion of the list.
			The algorithm repeatedly picks the next element and inserts it into the sorted portion of the list by shifting larger elements to the right.
			This process is akin to how one might sort a hand of playing cards.
		</p>
		<h2>Advantages</h2>
		<ol>
			<li>
				<b>Simplicity:</b> The algorithm is easy to understand and implement, making it a great choice for educational purposes.
			</li>
			<li>
				<b>Efficiency on Small or Partially Sorted Data:</b> Insertion Sort performs well on small datasets or lists that are already partially sorted, with a best-case time complexity of O(n).
			</li>
			<li>
				<b>Stability:</b> Insertion Sort is stable, maintaining the order of elements with equal values.
			</li>
			<li>
				<b>In-place Sorting:</b> It requires no additional memory space, as it sorts the list within the original array.
			</li>
		</ol>
		<h2>Disadvantages</h2>
		<ol>
			<li>
				<b>Inefficiency on Large Datasets:</b> The algorithm has an average and worst-case time complexity of O(n²), making it slow and impractical for large datasets.
			</li>
			<li>
				<b>High Number of Shifts:</b> In the worst case, each new element requires shifting all the elements in the sorted portion, leading to numerous shifts, which can be computationally expensive.
			</li>
		</ol>
		<h2>Conclusion</h2>
		<p>
			Insertion Sort is particularly useful for small datasets or as part of more complex algorithms, such as hybrid sorting methods.
			While it is not suitable for large datasets, its simplicity and efficiency on nearly sorted data make it a valuable tool in specific contexts.
		</p>
		<p><b>Source:</b> <a href="https://en.wikipedia.org/wiki/Insertion_sort">Article about insertion sort on wikipedia.org</a></p>
	</div>
</Layout>

<style>
	.algorithm-container {
		width: 100%;
	}
</style>