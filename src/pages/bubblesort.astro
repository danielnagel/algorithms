---
import Layout from '../layouts/Layout.astro';
import Canvas from '../components/Canvas.astro';
const customColorTheme = undefined;
const heading = 'Daniel\'s algorithms';
---


<Layout title={heading} customColorTheme={customColorTheme}>
	<div class="algorithm-container">
		<h1>Bubble Sort ðŸ§¼</h1>
		<Canvas algorithm='bubblesort' customColorTheme={customColorTheme} />
		<h2>Functionality</h2>
		<p>
			Bubble Sort is a simple comparison and swapping algorithm used for sorting lists.
			It works by repeatedly comparing adjacent elements in the list and swapping them if they are in the wrong order.
			This process is repeated until the list is completely sorted.
			Specifically, the algorithm repeatedly passes through the list, and with each pass,
			the largest elements "bubble" to the end of the list,
			similar to how air bubbles rise to the surface of water.
		</p>
		<h2>Advantages</h2>
		<ol>
			<li>
				<b>Simplicity:</b> The algorithm is easy to understand and implement, making it ideal for educational purposes.
			</li>
			<li>
				<b>Stability:</b> Bubble Sort is a stable sorting algorithm, meaning it preserves the order of elements with equal values.
			</li>
			<li>
				<b>In-place Sorting:</b> The algorithm requires no additional memory space as it sorts the elements directly in the original list.
			</li>
		</ol>
		<h2>Disadvantages</h2>
		<ol>
			<li>
				<b>Slowness:</b> Bubble Sort has an average and worst-case time complexity of O(nÂ²), making it inefficient for large datasets.
			</li>
			<li>
				<b>Unnecessary Comparisons:</b> Even if the list is partially sorted, the algorithm continues to perform unnecessary comparisons and swaps.
			</li>
		</ol>
		<h2>Conclusion</h2>
		<p>
			Bubble Sort, due to its simplicity and clarity, is particularly suitable for learning the basics of sorting algorithms,
			but it is mostly unsuitable for practical applications on large datasets.
		</p>
		<p><b>Source:</b> <a href="https://en.wikipedia.org/wiki/Bubble_sort">Article about bubble sort on wikipedia.org</a></p>
	</div>
</Layout>

<style>
	.algorithm-container {
		width: 100%;
	}
</style>