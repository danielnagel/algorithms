---
import ControlPanel from './ControlPanel.astro';

interface Props {
    algorithm: string;
    // eslint-disable-next-line no-undef
    customColorTheme?: CustomColorTheme;
}

const { algorithm, customColorTheme } = Astro.props;
const colorsString = customColorTheme ? JSON.stringify(customColorTheme) : undefined;
---

<div style="width: 100%">
	<canvas
		data-algorithm={algorithm}
		data-colors={colorsString}
		id="algorithm-canvas"
		class="canvas"
		width="2000"
		height="1200"></canvas>
	<ControlPanel />
</div>

<script>
    window.onload = async() => {
    	const { AnimationManger } = await import('../lib/animation');
    	let colorTheme: ColorTheme | undefined = undefined;
    	const colorsDataSet = document.getElementById('algorithm-canvas')?.dataset.colors;
    	if (colorsDataSet) {
    		try {
    			colorTheme = JSON.parse(colorsDataSet);
    		} catch (e) {
    			console.warn(`Could not parse color theme, falling back to default. Error message: ${e instanceof Error ? e.message : ''}`);
    		}
    	}
    	new AnimationManger(document.getElementById('algorithm-canvas')?.dataset.algorithm, colorTheme);
    };
</script>

<style>
    .canvas {
        background-color: var(--primaryLighter, #333);
        border: 3px solid var(--primaryLight, #222);
        width: 70%;
        margin-left: 15%;
    }

    @media screen and (max-width: 1920px) {
        .canvas {
            width: 100%;
            margin: 0;
        }
    }
    @media screen and (max-width: 950px) {
        .canvas {
            margin-left: -10.5%;
            width: 120%;
        }
    }
</style>
